Ejercicios 10 


1.Importaci√≥n de React y uso del Hook useState:
    
    
    
    `import React, { useState } from 'react';`
    
    Se importa React y el hook `useState`, que permite a los componentes funcionales de React tener un estado.
    
2. Funci√≥n `calculateScore`:
    
    
    `const calculateScore = (x: number, y: number) => {   const dist = Math.sqrt(x * x + y * y);   if (dist <= 1) return 10;   if (dist <= 5) return 5;   if (dist <= 10) return 1;   return 0; };`
    
    Esta funci√≥n toma las coordenadas ùë•x y ùë¶y, calcula la distancia desde el origen usando la f√≥rmula de la distancia euclidiana ùë•2+ùë¶2x2+y2‚Äã, y devuelve un puntaje basado en esa distancia:
    
    - Si la distancia es menor o igual a 1, el puntaje es 10.
    - Si la distancia es menor o igual a 5, el puntaje es 5.
    - Si la distancia es menor o igual a 10, el puntaje es 1.
    - Si la distancia es mayor a 10, el puntaje es 0.
3. Componente `App`:
    
    
    
    `const App = () => {   const [x, setX] = useState('');   const [y, setY] = useState('');   const [score, setScore] = useState(null);`
    
    El componente `App` usa el hook `useState` para manejar tres estados:
    
    - `x`: para el valor de la coordenada ùë•x.
    - `y`: para el valor de la coordenada ùë¶y.
    - `score`: para almacenar el puntaje calculado.
4. Manejo de cambios en las entradas:
    
    
    
      `const handleXChange = (e: { target: { value: React.SetStateAction<string>; }; }) => setX(e.target.value);   const handleYChange = (e: { target: { value: React.SetStateAction<string>; }; }) => setY(e.target.value);`
    
    Estas funciones se llaman cuando cambia el valor de las entradas de ùë•x e ùë¶y, actualizando los estados correspondientes.
    
5. Funci√≥n para calcular el puntaje:
    
    
    
      `const handleCalculateScore = () => {     const xNum = parseFloat(x);     const yNum = parseFloat(y);     if (!isNaN(xNum) && !isNaN(yNum)) {       const newScore = calculateScore(xNum, yNum);       setScore(newScore);     } else {       alert('Please enter valid numbers for both X and Y.');     }   };`
    
    Esta funci√≥n se llama al hacer clic en el bot√≥n de calcular. Convierte los valores de ùë•x e ùë¶y a n√∫meros flotantes, verifica si son n√∫meros v√°lidos, calcula el puntaje usando `calculateScore` y actualiza el estado del puntaje. Si los valores no son v√°lidos, muestra una alerta.
    
6. Renderizado del componente:
    
    
      `return (     <div style={{ textAlign: 'center', marginTop: '50px' }}>       <h1>Score Calculator</h1>       <div style={{ marginBottom: '20px' }}>         <label>           X:           <input type="number" value={x} onChange={handleXChange} style={{ marginLeft: '10px', marginRight: '20px' }} />         </label>         <label>           Y:           <input type="number" value={y} onChange={handleYChange} style={{ marginLeft: '10px' }} />         </label>       </div>       <button onClick={handleCalculateScore} style={{ padding: '10px 20px' }}>         Calculate Score       </button>       {score !== null && (         <div style={{ marginTop: '20px' }}>           <h2>Your Score: {score}</h2>         </div>       )}     </div>   ); };`
    
    El m√©todo `return` define el JSX que se renderiza en la pantalla:
    
    - Un contenedor principal con estilo centrado y un margen superior.
    - Un t√≠tulo "Score Calculator".
    - Dos etiquetas `label` con entradas para las coordenadas ùë•x e ùë¶y.
    - Un bot√≥n que llama a `handleCalculateScore` al hacer clic.
    - Una secci√≥n condicional que muestra el puntaje calculado si no es `null`.
7. Exportaci√≥n del componente `App`:
    
    
    
    `export default App;`
    
    Esto permite que el componente `App` se use en otras partes de la aplicaci√≥n.


    ENLACE VIDEO
https://www.youtube.com/watch?v=TZqthxWk1Mw
    